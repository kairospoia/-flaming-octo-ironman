<?php
// $Id;

/**
 * @file
 * Sell Gift Certificates on an Ubercart-powered Drupal store
 */
module_load_include('inc', 'uc_gift_certificate', 'UcGiftCertificate.class'); // Experimental OOP
module_load_include('inc', 'uc_gift_certificate', 'uc_gift_certificate.user');
module_load_include('inc', 'uc_gift_certificate', 'uc_gift_certificate.panes');

// Conditional Actions not fully ported over yet, but some functions work.
module_load_include('inc', 'uc_gift_certificate', 'uc_gift_certificate.ca');

/**
 * Implementation of hook_perm().
 */
function uc_gift_certificate_perm() {
  return array('administer gift certificates');
}

/*
 * Implementation of hook_menu().
 */
function uc_gift_certificate_menu() {
  $items = array();
  $items['admin/store/settings/gift_certificates'] = array(
    'title' => 'Gift Certificate Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_gift_certificate_settings'),
    'file' => 'uc_gift_certificate.admin.inc',
    'description' => 'Administer Gift Certificates',
    'access arguments' => array('administer store'),
  );
  $items['redeem'] = array(
    'title' => 'Gift Certificate Code',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_gift_certificate_cert_code_form'),
    'description' => 'Enter Your Gift Certificate Code',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
  );
  $items['my_gift_certificates'] = array(
    'title' => 'Send Gift Certificates',
    'description' => 'Issue Gift Certificates',
    'page callback' => 'uc_gift_certificate_issue',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/store/gift_certificates'] = array(
    'title' => 'Gift Certificates',
    'description' => 'Manage Gift Certificates',
    'page callback' => 'uc_gift_certificate_manage',
    'file' => 'uc_gift_certificate.admin.inc',
    'page arguments' => array('manage'),
    'access arguments' => array('administer gift certificates'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/store/gift_certificates/list'] = array(
    'title' => 'List',
    'description' => 'Manage Gift Certificates',
    'page callback' => 'uc_gift_certificate_manage',
    'page arguments' => array('manage'),
    'file' => 'uc_gift_certificate.admin.inc',
    'access arguments' => array('administer gift certificates'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/store/gift_certificates/add'] = array(
    'title' => 'Add',
    'description' => 'Add A Gift Certificate',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_gift_certificate_add_form', 'add'),
    'file' => 'uc_gift_certificate.admin.inc',
    'access arguments' => array('administer gift certificates'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );
  $items['gift_certificates/%/issue'] = array(
    'title' => 'Issue Gift Certificate',
    'description' => 'Issue the gift certificate to a user',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_gift_certificate_issue_form', 1),
    'file' => 'uc_gift_certificate.user.inc',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/store/gift_certificates/%/edit'] = array(
    'title' => 'Edit Certificate',
    'description' => 'Edit a currently existing Gift Certificate',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_gift_certificate_add_form', 3),
    'file' => 'uc_gift_certificate.admin.inc',
    'access arguments' => array('administer gift certificates'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/store/gift_certificates/%/delete'] = array(
    'title' => 'Delete Gift Certificate',
    'description' => 'Delete Gift Certificate',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_gift_certificate_delete_confirm', 3),
    'file' => 'uc_gift_certificate.admin.inc',
    'access arguments' => array('administer gift certificates'),
    'type' => MENU_CALLBACK,
  );
  $items['cart/checkout/get_certificate_discount/%'] = array(
    'title' => 'Certificate details',
    'description' => 'Certificate details.',
    'page callback' => 'uc_gift_certificate_apply_discount',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['cart/checkout/certificate/%'] = array(
    'title' => 'Certificate details',
    'description' => 'Certificate details.',
    'page callback' => 'uc_gift_certificate_apply',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_token_values(). (token.module)
 */
function uc_gift_certificate_token_values($type, $object = NULL) {
  $values = array();
  switch ($type) {
    case 'gift_certificate':
      $gc = $object;
      $values['gift-cert-id'] = $gc->certificate_id;
      $values['gift-cert-name'] = $gc->name;
      $values['gift-cert-value'] = uc_currency_format($gc->original_value);
      $values['gift-cert-remaining-value'] = uc_currency_format($gc->remaining_value);
      $values['gift-cert-user-id'] = $gc->user_id;
      $values['gift-cert-purchaser-id'] = $gc->purchaser_id;
      $values['gift-cert-order-id'] = $gc->order_id;
      $values['gift-cert-product-id'] = $gc->order_product_id;
      $values['gift-cert-code'] = $gc->cert_code;
      if (!empty($gc->message)) {
        $values['gift-cert-message'] = $gc->message;
      }
      break;
  }

  return $values;
}

/**
 * Implementation of hook_token_list(). (token.module)
 */
function uc_gift_certificate_token_list($type = 'all') {
  $tokens = array();
  if ($type == 'gift_certificate' || $type == 'all') {
    $tokens['gift_certificate']['gift-cert-id'] = t('The certificate ID.');
    $tokens['gift_certificate']['gift-cert-name'] = t('The certificate name.');
    $tokens['gift_certificate']['gift-cert-message'] = t('The message to the recipient.');
    $tokens['gift_certificate']['gift-cert-value'] = t('The certificate\'s original value.');
    $tokens['gift_certificate']['gift-cert-remaining-value'] = t('The certificate\'s remaining value.');
    $tokens['gift_certificate']['gift-cert-user-id'] = t('The ID of the certificate recipient.');
    $tokens['gift_certificate']['gift-cert-purchaser-id'] = t('The ID of ther certificate purchaser.');
    $tokens['gift_certificate']['gift-cert-order-id'] = t('The order associated with the certificate.');
    $tokens['gift_certificate']['gift-cert-product-id'] = t('The product associated with the certificate.');
    $tokens['gift_certificate']['gift-cert-code'] = t('The certificate code.');
  }

  return $tokens;
}

/**
 * Implementation of hook_theme().
 */
function uc_gift_certificate_theme() {
  return array(
    'uc_gift_certificate' => array(
      'template' => 'uc_gift_certificate',
      'arguments' => array('gift_certificate' => NULL, 'account' => NULL),
    ),
  );
}

/**
 * Preprocess a formatted gift certificate email with a git cert's data.
 */
function template_preprocess_uc_gift_certificate(&$variables) {
  $variables['order'] = uc_order_load($variables['gift_certificate']->order_id);
  if (!empty($variables['order']) && !empty($variables['gift_certificate']->order_product_id)) {
    $variables['order_product'] = db_fetch_object(db_query('SELECT * FROM {uc_order_products} WHERE order_product_id = %d', $variables['gift_certificate']->order_product_id));
  }

  $replacements = array(
    'global' => NULL,
    'gift_certificate' => $variables['gift_certificate'],
    'user' => $variables['account'],
  );

  $full = new stdClass();
  $full->tokens = $full->values = array();
  foreach ($replacements as $type => $object) {
    $temp = token_get_values($type, $object);
    $full->tokens = array_merge($full->tokens, $temp->tokens);
    $full->values = array_merge($full->values, $temp->values);
  }

  foreach ($full->tokens as $key => $token) {
    $value = $full->values[$key];
    $variables[str_replace('-', '_', $token)] = $value;
  }

  if (!empty($GLOBALS['uc_gift_certificate_new_user_pass'])) {
    $variables['is_new_user'] = TRUE;
    $variables['new_password'] = $GLOBALS['uc_gift_certificate_new_user_pass'];
  }
}

/**
 * Implementation of hook_mail().
 */
function uc_gift_certificate_mail($key, &$message, $params) {
  switch ($key) {
    case 'gift-certificate':
      $replacements = array(
        'global' => NULL,
        'gift_certificate' => $params['gift_certificate'],
        'user' => $params['account'],
      );
      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
      $subject_var = $params['is_new_user'] ? 'uc_gift_certificate_email_new_user_subject' : 'uc_gift_certificate_email_subject';
      $message['subject'] = variable_get($subject_var, uc_gift_certificate_get_setting_defaults($subject_var));
      $message['subject'] = token_replace_multiple($message['subject'], $replacements);
      $message['from'] = uc_store_email_from();
      $message['body'][] = theme('uc_gift_certificate', $params['gift_certificate'], $params['account']);
      break;
  }
}

/**
 * Email the user a notification about their gift certificate.
 *
 * @param string $recipient_email
 *   The email address of the desired recipient of the certificate. Can be
 *   manully entered by the purchaser during the product's add-to-cart process,
 *   or can auto-designated by the "allow anonymous recipients" toggleswitch as
 *   the purchaser's own email address entered into the cart/checkout panes.
 * @param string $certificate_id
 *   The numeric ID of the gift certificate.
 * @param string $msg_to_recipient
 *   The optional message a purchaser typed into the "Message to recipient"
 *   textarea during the add-to-cart phase.
 */
function uc_gift_certificate_mail_cert($recipient_email, $certificate_id, $msg_to_recipient = NULL) {
  if (!valid_email_address($recipient_email)) {
    drupal_set_message(t('The e-mail address %mail is not valid.', array('%mail' => $recipient_email)), 'error');
    return FALSE;
  }

  $account = user_load(array('mail' => $recipient_email));

  if (!$account) {
    drupal_set_message(t('The e-mail address %mail does not have a user account.', array('%mail' => $recipient_email)), 'error');
    return FALSE;
  }

  $gc = uc_gift_certificate_load($certificate_id);
  $gc->message = $msg_to_recipient;
  $params = array(
    'gift_certificate' => $gc,
    'account' => $account,
  );

  drupal_mail('uc_gift_certificate', 'gift-certificate', $recipient_email, user_preferred_language($account), $params, uc_store_email_from(), TRUE);
  watchdog('gift_certificate', 'Sent a gift certificate announcment email to ' . $recipient_email);
  return;
}

/**
 * Issues an existing certificate to a specific user.
 *
 * Called by:
 *   uc_gift_certificate_uc_checkout_complete()
 *
 * @param string $recipient_email
 *   The email address of the gift certificate's original recipient.
 * @param integer $certificate_id
 *   The numeric ID number of the gift certificate which needs to be issued.
 * @param string $purchaser_email
 *   The email address of the Ubercart purchaser who just checked out.
 */
function uc_gift_certificate_issue_cert($recipient_email, $certificate_id, $purchaser_email = NULL) {
  if (variable_get('uc_gift_certificate_anonymous_recipients', '') == '1') {
    // Sanity check this request to make sure it's safe to proceed.
    if ($recipient_email && $certificate_id) {
//      watchdog('gift_certificate', 'The $recipient_email address provided to uc_gift_certificate_issue_cert() for certificate #%d was %s', array('%d' => $certificate_id, '%s' => $recipient_email), WATCHDOG_NOTICE);
      $recipient = user_load(array('mail' => $recipient_email));
      $recipient_uid = $recipient->uid;
//      watchdog('gift_certificate', 'The $recipient_uid found was %d', array('%d' => $recipient_uid), WATCHDOG_NOTICE);
    }
    else {
      // We didn't receive a valid issue certificate request because there was no
      // $recipient_email address provided, and no $certificate_id, so bail out.
      return;
    }

    if ($purchaser_email && $recipient_email) {
      // If we have a purchaser's email address, a gift certificate is being
      // purchased; temporarily set purchaser and recipient to the same uid.
      $purchaser = user_load(array('mail' => $purchaser_email));
      $purchaser_uid = $purchaser->uid;
      db_query('UPDATE {uc_gift_certificates} SET user_id = %d, purchaser_id = %d WHERE certificate_id = %d', $recipient_uid, $purchaser_uid, $certificate_id);
    }

    elseif ($recipient_uid) {
      // If we don't have a purchaser's email address, a gift certificate is being
      // redeemed; change the user_id from the original purchaser to the person
      // who's redeeming the certificate.
      db_query('UPDATE {uc_gift_certificates} SET user_id = %d WHERE certificate_id = %d', $recipient_uid, $certificate_id);
    }

    return;
  }

  else {
    $account = user_load(array('mail' => $recipient_email));
    // If the user doesn't exist, create it.
    if (!$account) {
      $fields = array(
        'name' => uc_store_email_to_username($recipient_email),
        'mail' => $recipient_email,
        'init' => $recipient_email,
        'pass' => user_password(variable_get('uc_pwd_length', 6)),
        'roles' => array(),
        'status' => 1,
      );
      $account = user_save('', $fields);
      // Needed by the uc_gift_certificate.tpl.php email template. We need OOP :(
      // TODO: Make the tpl.php send the new user a one-time login link, rather
      // than emailing them their password in plaintext? ~Senpai
      $GLOBALS['uc_gift_certificate_new_user_pass'] = $fields['pass'];
    }

    return db_query('UPDATE {uc_gift_certificates} SET user_id = %d WHERE certificate_id = %d', $account->uid, $certificate_id);
  }
}

/**
 * Callback function for the discount line item.
 */
function uc_gift_certificate_line_item_discount($op, $order) {
  switch ($op) {
    case 'load':
      $discounts = uc_gift_certificate_calculate_discounts($order);
      $lines = array();
      foreach ($discounts as $discount) {
        $lines[] = array(
          'id' => 'discount',
          'title' => $discount['title'],
          'amount' => $discount['amount'],
          'weight' => variable_get('uc_li_discount_weight', 5),
        );
      }
      return $lines;
  }
}

/**
 * Calculates the discount line items from the configured conditional actions.
 *
 * @param $order
 *   The order object.
 * @return
 *   The array of line items, each containing an id, a title, and an amount.
 */
function uc_gift_certificate_calculate_discounts($order) {
  global $user;

  if (isset($order->uid)) {
    $account = user_load($order->uid);
  }
  else {
    $account = $user;
  }

  if (is_array($order->line_items)) {
    foreach ($order->line_items as $i => $line) {
      if (drupal_substr($line['type'], 0, 9) == 'discount_') {
        unset($order->line_items[$i]);
      }
    }
  }

  $arguments = array(
    'order' => array(
      '#entity' => 'uc_order',
      '#title' => t('Order'),
      '#data' => $order,
    ),
    'account' => array(
      '#entity' => 'user',
      '#title' => t('User'),
      '#data' => $account,
    ),
  );

  $id = 0;
  $order->discounts = array();

  // Pull the "calculate_discounts" trigger in such a way to get the results.
  $predicates = ca_load_trigger_predicates('calculate_order_discounts');
  foreach ($predicates as $predicate) {
    if (ca_evaluate_conditions($predicate, $arguments)) {
      $discounts = ca_perform_actions($predicate, $arguments);
      foreach ((array) $discounts as $i => $discount) {
        if ($predicate['#actions'][$i]['#name'] == 'uc_discount_action_get_order_discount' && $discount) {
          // Allow successive discounts to inspect this discount by putting
          // it in the order object.
          $order->discounts[$id] = array(
            'id' => $id,
            'title' => check_plain($predicate['#actions'][$i]['#title']),
            'amount' => $discount,
            'weight' => $predicate['#actions'][$i]['#settings']['line_item_weight'],
          );
          $id++;
        }
      }
    }
  }

  return $order->discounts;
}

/**
 * Implementation of hook_order().
 *
 * @param string $op
 *
 * @param object $order
 *   The Ubercart order which is in process.
 *
 * @param $arg2
 *   Could be anything, but is probably the status of an order, such as 'payment_received'.
 */
function uc_gift_certificate_order($op, &$order, $arg2) {
  switch ($op) {
    case 'load':
      // Load any certificats that we have attached to this order.
      $order->uc_gift_certificate_used = get_uc_gift_certificates($order);

      break;

    case 'save':
      // Attach some certificates to this order, if we can.
      $certificates = db_query("SELECT * FROM {uc_gift_certificates} WHERE order_id = %d
        AND remaining_value > 0", $order->uid, $order->order_id);

      while ($attach_cert = db_fetch_object($certificates)) {
        uc_gift_certificate_attach($order, $attach_cert);
      }

      // @todo: Refactor into the fix_line_items function
      foreach($order->line_items as $key => $line_item) {
        if($line_item['type'] == 'gift_certificate') {
          unset($order->line_items[$key]);
          db_query('DELETE FROM {uc_order_line_items} WHERE order_id = %d AND type = "%s"', $order->order_id, 'gift_certificate');
          break;
        }
      }
      // @todo: Combine the above and below functions.
      // Add Gift Certificate line items.
      // @todo: This needs to make sure we don't subtract more than the $order_total, rather than change applied_amount at the calculation stage
      if (!empty($order->uc_gift_certificate_used)) {
        $deduction = uc_gift_certificate_calculate_deduction($order, TRUE); // Add the line items to the order.
        // If it looks like we can cover the entire order, and the payment method is not zero_total,
        // force them into using zero_total.
        if ($deduction >= $order->order_total) {
          $order->payment_method = 'zero_total';
        }
      }

      // Update order line items (see new_order_line_items notes above).
      //$order->line_items = $new_order_line_items;
      break;

    case 'submit':
      // If the complete order was covered, submit the payment.
      if ($order->payment_method == 'zero_total' && $order->order_total == 0) {

        uc_payment_enter($order->order_id, 'zero_total', 0, $order->uid, NULL, t('Checkout completed with a gift certificate.'));

        if ($order->order_status == 'in_checkout') {
          // Update the order status to post checkout.
          uc_order_update_status($order->order_id, 'payment_received');
        }
      }
      else {
        // All other payment methods.
        // Log the partial payment.
        uc_payment_enter($order->order_id, 'zero_total', 0, $order->uid, NULL, t('Partial payment entered with a gift certificate'));
      }
      break;

    case 'total':
      foreach($order->line_items as $line_item) {
        if($line_item['type'] == 'gift_certificate') {
          //return $line_item['amount'];
        }
      }

    case 'update':

      // @todo: This should (maybe) be handled via Conditional Actions.
      // @todo: It looks like uc_order_state_default() is not returning anything. Might mean we need better defaults.
      // Look up the admin-configured gift certificate status array to see
      // which checkbox is selected as the actionable status.
      $gc_status_array = variable_get('uc_gift_certificate_order_status_deduct', uc_gift_certificate_get_setting_defaults('uc_gift_certificate_order_status_deduct'));

      // Only update certificate values if our 'old' order status is the default Post-checkout status,
      // but $arg2 is our 'completed' status. This should mean that our order has just been created, and
      // a full payment has been received, so we're ready to move the order to a completed status.
      if ($order->order_status == uc_order_state_default('post_checkout') && $gc_status_array[$arg2]) {
        // Reduce the remaining value of any certificates that were used during this purchase.
        uc_gift_certificate_update_cert_vals($order, $arg2);
      }

      // Void the certificates when an order is canceled.
      if ($arg2 == 'canceled') {
        uc_gift_certificate_void_certificates($order);
      }

      break;

    case 'delete':
      db_query("DELETE FROM {uc_gift_certificates} WHERE order_id = %d", $order->order_id);
      break;

  }
}

/**
 * Implementation of hook_line_item().
 */
function uc_gift_certificate_line_item() {
  $items[] = array(
    'id' => 'gift_certificate',
    'title' => t('Gift Certificates'),
    'weight' => 10,
    'stored' => TRUE,
    'default' => FALSE,
    'calculated' => TRUE,
    'add_list' => TRUE,
    'callback' => 'uc_gift_certificate_line_items',
  );

  return $items;
}


function uc_gift_certificate_line_items($op, $order) {
  switch ($op) {
    case 'cart-preview':
      global $user;

      // @todo: If we're an anonymous user, check the amount on this order's gift certs (if applicable)
      if ($user->uid > 0 ||
        (variable_get('uc_gift_certificate_anonymous_recipients', '') == '1')) {
        $certificates = uc_gift_certificate_total($user->uid);
      }

      $order_total = 0;

      foreach($order as $product) {
        $order_total += ($product->price * $product->qty);
      }

      $deduction = ($order_total <= $certificates) ? $order_total : $certificates;

      // Show the line item in the payment preview if there's a deduction and certificates available.
      if ($deduction <> 0 && $certificates > 0) {
        drupal_add_js("if (Drupal.jsEnabled) {
          \$(document).ready(function() {
            if (window.set_line_item) {
              set_line_item('gift_certificate', '". t('Gift Certificates') ."', ". -abs($deduction) .", 9);
              //uc_gift_certificate_check_total(".$order_total.");
            }
          })
        };", 'inline');
      }

      if ($order_total <= $deduction) {

        // If the order total is now zero, select the Gift Certificates method automatically.
        drupal_add_js("
        if (Drupal.jsEnabled) {
          \$(document).ready(function() {
            $('input:radio[value=zero_total]').removeAttr('disabled').attr('checked', 'checked').parent().show(0);
            get_payment_details(Drupal.settings.ucURL.checkoutPaymentDetails + 'zero_total');
          })};", 'inline');
      }

      break;

    case 'load':
      //$certificates = get_uc_gift_certificates($order);
      $deduction = uc_gift_certificate_calculate_deduction($order);

      $lines = array();
      $lines[] = array(
        'id' => 'gift_certificate',
        'title' => t('Gift certificates'),
        'amount' => $deduction,
        'weight' => variable_get('uc_li_discount_weight', 6),
      );

      return $lines;
  }

}
/**
 * Create a new certificate and insert it into the database.
 * Called by uc_gift_certificate_uc_checkout_complete().
 *
 * @param object $order
 *   The ubercart order that was just placed; contains a list of $order->products.
 * @param object $account
 *   The Drupal user account that was used for the order, or created during checkout.
 */
//function uc_gift_certificate_create_new_certs($order, $account) {
//  $order_id = $order->order_id;
//  $purchaser_email = $order->primary_email;
//  $email_attrib = uc_attribute_load(variable_get('uc_gift_certificate_email_aid', ''));
//  $msg_attrib = uc_attribute_load(variable_get('uc_gift_certificate_message_aid', ''));
//  foreach ($order->products as $product) {
//    if ($product->data){
//      $data = $product->data;
//      $is_gift_cert = FALSE;
//      // Check if the product is a gift certificate.
//      if ($data && $data['attributes']) {
//        // Attribute is stored using $label.
//        foreach ($data['attributes'] as $label => $vals) {
//          $attrib = _uc_gc_find_attrib_by_label($label, $product->nid);
//          if ($attrib->aid == $email_attrib->aid) {
//            $is_gift_cert = TRUE;
//            $recipient_email = $vals[0];
//          }
//          elseif ($attrib->aid == $msg_attrib->aid) {
//            $msg_to_recipient = $vals[0];
//          }
//        }
//      }
//
//      if ($is_gift_cert) {
//        $data['attributes']['Certificate Code'][0] = '';
//        $title = t('@gc_title for order #@order_id', array('@gc_title' => $product->title, '@order_id' => $order_id));
//        // Generate a certificate containing a random code and INSERT the certificate into the DB.
//        $new_gc = new stdClass();
//        $new_gc->name = $title;
//        $new_gc->original_value = $new_gc->remaining_value = $product->qty * $product->price;
//        $new_gc->purchaser_id = $order->uid;
//        $new_gc->order_id = $order->order_id;
//        $new_gc->order_product_id = $product->order_product_id;
//        $new_gc->created_on = time();
//        if (drupal_write_record('uc_gift_certificates', $new_gc)) {
//          $certificate_id = db_last_insert_id('uc_gift_certificates', 'certificate_id');
//          $cert_code = $certificate_id ."-". uc_gift_certificate_mKey();
//          db_query("UPDATE {uc_gift_certificates} SET cert_code = '%s' WHERE certificate_id = %d", $cert_code, $certificate_id);
//
//          if (empty($recipient_email) && variable_get('uc_gift_certificate_anonymous_recipients', '') == '1') {
//            // Set the "recipent's email address" to the "purchaser's email address"
//            // until the anonymous recipient comes back later to claim their prize.
//            $recipient_email = $account->mail;
//          }
//
//          // TODO: FRAUD PREVENTION PLAN - Call these two functions AFTER an order
//          // is updated to $order->order_status = paid.
//          uc_gift_certificate_issue_cert($recipient_email, $certificate_id, $purchaser_email);
//          uc_gift_certificate_mail_cert($recipient_email, $certificate_id, $msg_to_recipient);
//
//          // Add the newly created cert_code to the product's attributes (serialized in uc_order_products)
//          $data['attributes']['Certificate Code'][0] = $cert_code;
//          $data = serialize($data);
//
//          db_query("UPDATE {uc_order_products} SET data = '%s' WHERE order_id = %d AND order_product_id = %d", $data, $order_id, $product->order_product_id);
//
//          uc_order_comment_save($order->order_id, 0, t('Added gift certificate !code worth !value.', array('!code' => $cert_code, '!value' => uc_currency_format($new_gc->original_value))));
//        }
//      }
//    }
//  }
//}

/**
 * Implementation of uc_checkout_complete().
 *
 * Create new certificate(s) and insert into the database.
 * Then, re-issue certificates to shoppers who redeem them.
 *
 * @param object $order
 *   The resulting order object from the completed checkout.
 * @param object $account
 *   The customer that completed checkout, either the current user, or the
 *   account created for an anonymous customer.
 */
function uc_gift_certificate_uc_checkout_complete($order, $account) {
//  if ($order->order_status == 'payment_received' || $order->order_status == 'completed') {
  watchdog('gift_certificate', 'Inside of uc_checkout_complete(), the status of order #%d is %s', array('%d' => $order->order_id, '%s' => $order->order_status, WATCHDOG_WARNING));
  $order_id = $order->order_id;
  $purchaser_email = $order->primary_email;
  $email_attrib = uc_attribute_load(variable_get('uc_gift_certificate_email_aid', ''));
  $msg_attrib = uc_attribute_load(variable_get('uc_gift_certificate_message_aid', ''));
  foreach ($order->products as $product) {
    if ($product->data) {
      $certificate_quantity = 1;
      while ($certificate_quantity <= $order->products[0]->qty) {
        $data = $product->data;
        $is_gift_cert = FALSE;

        // Check to see if the product is a gift certificate.
        if ($data && $data['attributes']) {
          // Attribute is stored using $label.
          foreach ($data['attributes'] as $label => $vals) {
            $attrib = _uc_gc_find_attrib_by_label($label, $product->nid);
            if ($attrib->aid == $email_attrib->aid) {
              $is_gift_cert = TRUE;
              $recipient_email = $vals[0];
            }
            elseif ($attrib->aid == $msg_attrib->aid) {
              $msg_to_recipient = $vals[0];
            }
          }
        }

        if ($is_gift_cert) {
          $data['attributes']['Certificate Code'][0] = '';
          $title = t('@gc_title for order #@order_id', array('@gc_title' => $product->title, '@order_id' => $order_id));
          // Generate a certificate containing a random code and INSERT the certificate into the DB.
          $new_gc = new stdClass();
          $new_gc->name = $title;
          if (variable_get('uc_gift_certificate_anonymous_recipients', '') == '1') {
            $new_gc->original_value  = $product->price;
            $new_gc->remaining_value = $product->price;
          }
          else {
            $new_gc->original_value = $new_gc->remaining_value = $product->qty * $product->price;
          }
          $new_gc->purchaser_id = $order->uid;
          $new_gc->order_id = $order->order_id;
          $new_gc->order_product_id = $product->order_product_id;
          $new_gc->created_on = time();
          if (drupal_write_record('uc_gift_certificates', $new_gc)) {
            $certificate_id = db_last_insert_id('uc_gift_certificates', 'certificate_id');
            $cert_code = $certificate_id ."-". uc_gift_certificate_mKey();
            db_query("UPDATE {uc_gift_certificates} SET cert_code = '%s' WHERE certificate_id = %d", $cert_code, $certificate_id);

            if (empty($recipient_email) && variable_get('uc_gift_certificate_anonymous_recipients', '') == '1') {
              // Set the "recipent's email address" to the "purchaser's email address"
              // until the anonymous recipient comes back later to claim their prize.
              $recipient_email = $account->mail;
            }

            // TODO: FRAUD PREVENTION PLAN - Call these two functions AFTER an order
            // is updated to $order->order_status = paid.
            uc_gift_certificate_issue_cert($recipient_email, $certificate_id, $purchaser_email);
            uc_gift_certificate_mail_cert($recipient_email, $certificate_id, $msg_to_recipient);

            // Add the newly created cert_code to the product's attributes (serialized in uc_order_products)
            $data['attributes']['Certificate Code'][0] = $cert_code;
            $data = serialize($data);

            db_query("UPDATE {uc_order_products} SET data = '%s' WHERE order_id = %d AND order_product_id = %d", $data, $order_id, $product->order_product_id);

            uc_order_comment_save($order->order_id, 0, t('Added gift certificate !code worth !value.', array('!code' => $cert_code, '!value' => uc_currency_format($new_gc->original_value))));
          }
        }
        $certificate_quantity++; // Continue until all gift certificate products in this order have been processed.
      }
    }
  }

  // Issue a Certificate to a shopper who's redeemed it. Due to the validation
  // function, this should only work once per attempted redemption.
  $certificate = uc_gift_certificate_load($order->uc_gift_certificate_used['certificate_id']);
  //$certificate = uc_gift_certificate_validate($certificate_code, $user_email);
  if ($certificate->purchaser_id == $certificate->user_id && $certificate->user_id != $order->uid) {
    // If a valid certificate has been paid for by a purchaser, but
    // not yet redeemed by a recipient user, re-issue the existing cert to the
    // recipient user now that there's a new uid for this user.
    uc_gift_certificate_issue_cert($order->primary_email, $certificate->certificate_id);
  }

  // Took this out because it was causing duplicate certificate deductions.
  // If we paid for any part of this order with gift certificates, deduct them.
  //uc_gift_certificate_update_cert_vals($order, $order->order_status);
  //}
}


/**
 * Update certificates with their new values after an order has been processed.
 *
 *  @param array $certificate An array containing an order's applied certificate(s)
 *
 *  @param int $order_id Order ID to update.
 */

function uc_gift_certificate_update_cert_vals($order, $order_status) {

  foreach($order->line_items as $line_item) {
    if ($line_item['type'] == 'gift_certificate' && $line_item['data']['certificate_id']) {

      // Load our certificate as it stands from the database.
      $certificate = uc_gift_certificate_load($line_item['data']['certificate_id']);

      // Make sure we can actually deduct from this certificate!
      if ($certificate->remaining_value > 0) {

        // Add the negative line-item deduction to the certificate
        $certificate->remaining_value += $line_item['amount'];

        // Don't store a sub-zero amount into the gift certificate, just set it at $0.
        $certificate->remaining_value = ($certificate->remaining_value <= 0) ? 0 : $certificate->remaining_value;

        // Use this time to update our certificate values.
        uc_order_comment_save($order->order_id, 0, t('Deducted !deducted from certificate !cid, new value is !newvalue.',
          array('!deducted' => uc_currency_format(abs($line_item['amount'])),
            '!cid' => $line_item['data']['cert_code'],
            '!newvalue' => uc_currency_format($certificate->remaining_value))));

        // Update the gift certificate tables with the new amount and order info.
        db_query("UPDATE {uc_gift_certificates} SET remaining_value = %f, order_id = %d
          WHERE certificate_id = %d", floatval($certificate->remaining_value), $order->order_id, $line_item['data']['certificate_id']);

        db_query("UPDATE {uc_gift_certificate_orders} SET applied_amount = %f WHERE order_id =  %d AND cid = %d",
          abs($line_item['amount']), $order->order_id, $line_item['data']['certificate_id']);
      }
    }
  }
}


/**
 * Implementation of hook_payment_method().
 */
function uc_gift_certificate_payment_method() {
  global $user;

  // Only show this to a user who is logged in and has certificates attached to their account.
  // @todo: Make this compatible with an anon user who just added a certificate to the order.
  if ($user->uid > 0 && uc_gift_certificate_total($user->uid) > 0) {
    $methods[] = array(
      'id' => 'zero_total',
      'name' => t('Gift Certificates'),
      'title' => t('Use my Gift Certificates to pay for the entire order. (You must choose another payment method if your gift certificates do not cover the ENTIRE cost.)'),
      'desc' => t('Allow customers with $0 order totals to checkout without paying.'),
      'callback' => 'uc_payment_method_zero_total',
      'checkout' => TRUE,
      'no_gateway' => TRUE,
      'weight' => 10,
    );
    return $methods;
  }
}

/**
 * Handle the "Zero Total" payment condition.
 */
function uc_payment_method_zero_total($op, &$order, $silent = FALSE) {
  switch ($op) {
    case 'order-load':

      break;

    case 'order-save':
      if (isset($order->uc_gift_certificate_used)) {
        //dsm('FOUND GIFT CERTIFICATES --- ');
        //dsm($order);
      }

      // Update the applicable amount for the gift certificate line item.
      $deduction = uc_gift_certificate_calculate_deduction($order);


      break;

    case 'order-submit':
      // Let them know if we can't complete the order.
      if ($order->order_total > .01 && $order->payment_method == 'zero_total') {
        $result[] = array(
          'pass' => FALSE,
          'message' => t("Your final order total of !total is not fully covered by your gift certificates.  Please go back and select a different method of payment.",
            array('!total' => uc_currency_format($order->order_total))));
        $_SESSION['expanded_panes'][] = 'payment';
        return $result;
      }

      // If a user tried submitting a $0 order with something other than gift certificates, kick them out.
      // @todo: Make sure this doesn't interfere with other payment methods or discounts.
      if ($order->order_total == 0 && $order->payment_method != 'zero_total' && $order->uc_gift_certificate_used) {
        $result[] = array(
          'pass' => FALSE,
          'message' => t("You can't submit an order for $0.00. Please choose the Gift Certificates payment method!"));
        $_SESSION['expanded_panes'][] = 'payment';
        return $result;
      }
      break;

    // Kick them out of reviewing the order if their order total isn't covered completely by Certificates.
    case 'cart-review':
      if ($order->order_total > .01 && $order->payment_method == 'zero_total') {
        drupal_set_message(t("Your final order total of !total is not fully covered by your gift certificate amount.  Please select an additional method of payment.",
          array('!total' => uc_currency_format($order->order_total))), 'error');
        drupal_goto('cart/checkout');
      }
      // If a user tried submitting a $0 order with something other than gift certificates, kick them out.
      // @todo: Make sure this doesn't interfere with other payment methods or discounts.
      if ($order->order_total == 0 && $order->payment_method != 'zero_total' && $order->uc_gift_certificate_used) {
        $result[] = array(
          'pass' => FALSE,
          'message' => t("You can't submit an order for $0.00. Please choose the Gift Certificates payment method!"));
        $_SESSION['expanded_panes'][] = 'payment';
        return $result;
      }
      break;
  }
}

/**
 * Generate a random alphanum gift certificate code.
 *
 * Note that this function DOES NOT create a unique code, just a random code.
 */
function uc_gift_certificate_mKey($len = 12, $type = 'ALNUM')
{
  // Register the lower case alphabet array.
  $alpha = array('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'j', 'k', 'm',
    'n', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');

  // Register the upper case alphabet array.
  $ALPHA = array('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'J', 'K', 'L', 'M',
    'N', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z');

  // Register the numeric array.
  $num = array('2', '3', '4', '5', '6', '7', '8', '9');

  // Initialize the keyVals array for use in the for loop.
  $keyVals = array();

  // Initialize the key array to register each char.
  $key = array();

  // Loop through the choices and register the choice to keyVals array.
  switch ($type)
  {
    case 'lower' :
      $keyVals = $alpha;
      break;
    case 'upper' :
      $keyVals = $ALPHA;
      break;
    case 'numeric' :
      $keyVals = $num;
      break;
    case 'ALPHA' :
      $keyVals = array_merge($alpha, $ALPHA);
      break;
    case 'ALNUM' :
      $keyVals = array_merge($alpha, $ALPHA, $num);
      break;
  }

  // Loop as many times as specified.
  // Register each value to the key array.
  for($i = 0; $i <= $len-1; $i++)
  {
    $r = rand(0,count($keyVals)-1);
    $key[$i] = $keyVals[$r];
  }

  // Glue the key array into a string and return it.
  return join("", $key);
}

/**
 * Implementation of hook_form_alter().
 */
function uc_gift_certificate_form_alter(&$form, &$form_state, $form_id) {
  if (strpos($form_id,'uc_product_add_to_cart_form') !== FALSE) {
    if (empty($form["attributes"])) {
      return;
    }

    foreach (element_children($form['attributes']) as $attrib_id) {
      if ($attrib_id == variable_get('uc_gift_certificate_email_aid', '')) {
        if (variable_get('uc_gift_certificate_anonymous_recipients', '') == '1') {
          global $user;
          $form['attributes'][$attrib_id]['#required'] = FALSE;
          $form['attributes'][$attrib_id]['#access'] = FALSE;
          // Appropriate the 'recipient's email address' attribute to become the
          // 'purchaser's email address' until the recipient comes back to
          // redeem their GC.
          $form['attributes'][$attrib_id]['#title'] = '';
        }
        else {
          $form['attributes'][$attrib_id]['#required'] = TRUE;
        }
        $form['#validate'][] = 'uc_gift_certificate_validate_addtocart_form';
      }

      if ($attrib_id == variable_get('uc_gift_certificate_message_aid', '')) {
        $form['attributes'][$attrib_id]['#type'] = 'textarea';
      }
    }
  }

  // Checkout form alter.
  global $user;

  // Alter the checkout form to prepare it for our special JS.
  if ($form_id == 'uc_cart_checkout_form' && isset($form['panes']['payment'])) {
    //drupal_add_js(drupal_get_path('module', 'uc_gift_certificate') .'/uc_gift_certificate.js');
  }

}

/**
 * Implementation of hook_form_validate()
 */
function uc_gift_certificate_validate_addtocart_form($form, &$form_state) {
  $aid = variable_get('uc_gift_certificate_email_aid', '');
  $mail = $form_state['values']['attributes'][$aid];
  if (!empty($mail) && !valid_email_address($mail)) {
    form_set_error("attributes[$aid]", t('@label is not a valid email address.', array('@label' => $form['attributes'][$aid]['#title'])));
  }
}

/**
 * Implementation of hook_add_to_cart()
 *
 * Validate that when a gift cert is added, the email address is valid.
 */
function uc_gift_certificate_add_to_cart($nid, $qty, $data) {
  if (variable_get('uc_gift_certificate_anonymous_recipients', '') == '0') {
    $node = node_load($nid);
    if (!empty($node->attributes)) {
      foreach ($node->attributes as $key => $attrib) {
        if ($attrib->aid == variable_get('uc_gift_certificate_email_aid', '') && !valid_email_address($data['attributes'][$key])) {
          $result[] = array(
            'success' => FALSE,
            'message' => t('@label is not a valid email address.', array('@label' => $attrib->label)),
          );
          return $result;
        }
      }
    }
  }
}

/**
 * Implementation of hook_form()
 */
function uc_gift_certificate_cert_code_form() {
  if (variable_get('uc_gift_certificate_anonymous_recipients', '') == '1') {
    drupal_set_message('The owner of this web store has chosen to disable
                      the redemption of Gift Certificates prior to checking out.
                      Please add some items to your cart and proceed to checkout
                      in order to redeem your Certificate', 'warning');
    //drupal_goto(); // Send the errant user back to the store's homepage?
    return;
  }
  else {
    $form['certificate_code'] = array(
      '#type' => 'textfield',
      '#required' => TRUE,
      '#title' => t('Enter your gift certificate code'),
      '#description' => t('If you have an old Gift Certificate from the previous shopping cart system, you can enter it here. The value remaining on your certificate will be transferred to your account, and immediately available for use towards your next purchase(s).<br/><br/>The gift certificate code will not need to be re-entered at checkout - simply checkout as normal and select the "Use My Gift Certificate" payment option.'),
    );
    $form['cancel'] = array(
      '#type' => 'item',
      '#value' => l(t('Cancel'), ''),
      '#weight' => 20,
    );
    $form['op'] = array('#type' => 'submit',
      '#value' => t('Submit'),
      '#weight' => 21,
    );

    return $form;
  }
}

/**
 * Implementation of hook_submit().
 */
function uc_gift_certificate_cert_code_form_submit($form, &$form_state) {
  global $user;

  if ($form_state['values']['certificate_code'] != '') {
    $num_rows = db_result(db_query("SELECT COUNT(*) FROM {uc_gift_certificates} WHERE cert_code  = '%s'", $form_state['values']['certificate_code']));
    if ($num_rows > 0) {
      $cert = db_fetch_object(db_query("SELECT * FROM {uc_gift_certificates} WHERE cert_code  = '%s'", $form_state['values']['certificate_code']));

      if (db_query("UPDATE {uc_gift_certificates} SET user_id = %d WHERE certificate_id = %d", $user->uid, $cert->certificate_id)) {
        $message = "";
      }
      else {
        $message = "ERROR";
      }
      drupal_set_message(t("Added certificate %cert_code worth !value", array('%cert_code' => $form_state['values']['certificate_code'], '!value' => $cert->remaining_value)));
    }
    else {
      drupal_set_message(t("There is no certificate with the code %cert_code", array('%cert_code' => $form_state['values']['certificate_code'])), 'error');
    }
  }
}

/**
 * Implementation of hook_block().
 */
function uc_gift_certificate_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {

    case 'list':
      $blocks[0]['info'] = t('Gift Certificate');
      return $blocks;

    case 'configure':
      $form['uc_gift_certificate_block'] = array(
        '#type' => 'textfield',
        '#title' => t('Content for the gift certificate block (the variable !value is the gift certificate amount)'),
        '#default_value' => variable_get('uc_gift_certificate_block', t('You have <strong>!value</strong> worth of gift certificates. They can be redeemed when you check out.')),
      );
      return $form;

    case 'save':
      variable_set('uc_gift_certificate_block', $edit['uc_gift_certificate_block']);
      break;

    case 'view':
      global $user;
      $total = uc_gift_certificate_total($user->uid);

      if ($total) {
        $block['subject'] = t('Gift Certificate');
        $block['content'] = t(variable_get('uc_gift_certificate_block', t('You have <strong>!value</strong> worth of gift certificates. They can be redeemed when you check out.')), array('!value' => uc_currency_format($total)));
      }
      return $block;
  }
}

/**
 * Apply the Certificate at checkout - covers the entire order.
 */
function uc_gift_certificate_apply($code = NULL) {
  $coupon = uc_gift_certificate_validate($code);

  if (!$coupon->valid) {
    $coupon->message = t('Sorry, the certificate '.$code.' is invalid or cannot be applied to this order.');
  }

  drupal_set_header("Content-Type: text/javascript; charset=utf-8");
  print drupal_to_js($coupon);
  exit();
}

/**
 * Apply the Certificate at checkout as a DISCOUNT.
 */
function uc_gift_certificate_apply_discount($user = NULL) {
  $coupon = uc_gift_certificate_validate_user($user);

  if (!$coupon->valid) {
    $coupon->message = t('Sorry, no certificates can be applied to this order.');
  }

  drupal_set_header("Content-Type: text/javascript; charset=utf-8");
  print drupal_to_js($coupon);
  exit();
}

/**
 * Validate a specific Gift Certificate code.
 *
 * @param string $certificate_code
 *   The alphanumeric code of the gift certificate needing to be validated.
 *
 * @return object The original gift certificate object, but now containing
 *                an additional true|false boolean element and an error message.
 */
function uc_gift_certificate_validate($certificate_code, $email_address = NULL) {
  // Load the Certificate based on its alphanumeric code. (There should be only
  // one matching $certificate_code in the DB).
  $certificate = db_fetch_object(db_query("SELECT * FROM {uc_gift_certificates} WHERE cert_code = '%s'", $certificate_code));

  if ($certificate->certificate_id) {

    // Presume this gift certificate is legit until proven otherwise.
    $certificate->valid = TRUE;

    if (variable_get('uc_gift_certificate_anonymous_recipients', '') == '1' && $email_address) {
      // Validate that the owner of this $email_address does not match the owner
      // of the gift certificate if the gift certificate has already been 'redeemed'
      // once. (A redeemed certificate in this case will have a different user_id
      // and purchaser_id)
      $user = user_load(array('mail' => $email_address));
      if ($user->uid !== 0 && $certificate->purchaser_id != $certificate->user_id && $certificate->user_id != $user->uid) {
        $certificate->error = t("That gift certificate code has already been used by someone else. Please try a different code.");
        $certificate->valid = FALSE;
      }
    }
    // TODO: Make sure that if uc_gift_certificate_anonymous_recipients is 0,
    // cert belongs to the current user, or is unclaimed.

    // Check to see that the Remaining Value of the gift certificate is not
    // greater than the Original Value, or we've got a hacker on our hands.
    if ($certificate->remaining_value > $certificate->original_value) {
      $certificate->error = t("Something appears to be wrong with that gift certificate. Please try a different code.");
      $certificate->valid = FALSE;
    }
    elseif (floatval($certificate->remaining_value <= 0)) {
      $certificate->error = t("The gift certificate @code has insufficient credit remaining.",
        array('@code' => $certificate->cert_code));
      $certificate->valid = FALSE;
    }

    // Now, set a few extra values which are used in other places.
    // @todo: This function should NOT BE DOING THIS, and these need to move.
    $certificate->title = t("Gift Certificate: @code", array('@code' => $certificate->cert_code));
    $certificate->amount = $certificate->remaining_value;

  }
  else {
    // The gift certificate was not found in the database. Build an object to return.
    $certificate = new stdClass();
    $certificate->error = t("Sorry, the gift certificate code @code is invalid.", array('@code' => $certificate_code));
    $certificate->valid = FALSE;
  }

  return $certificate;
}


/**
 * Load a gift certificate.
 *
 * @param string $id
 *   Either the incrementally-numbered gift certificate integer, or the random
 *   alphanumeric code used when redeeming a gift certificate.
 */
function uc_gift_certificate_load($id) {
  // Return the certificates by lowest remaining_value first, to ease in deductions.
  if (!ctype_digit($id)) {
    $object = db_fetch_object(db_query("SELECT * FROM {uc_gift_certificates} WHERE cert_code = '%s' ORDER BY remaining_value ASC", $id));
  }
  else {
    $object = db_fetch_object(db_query("SELECT * FROM {uc_gift_certificates} WHERE certificate_id = %d ORDER BY remaining_value ASC", $id));
  }

  if ($object == '') {
    drupal_set_message(t("The gift certificate !val does not exist."), array('!val' => $id));
    return FALSE;
  }
  else {
    // @todo: See if the certificate has been used in an order.
    return $object;
  }
}

/**
 * Calculate the total remaining value of all gift certificates issued to a specific user id.
 *
 * @param integer $uid
 *  A user ID
 *
 * @return float $total
 *  A calculated average of the summation of all remaining values.
 *
 * @see uc_gift_certificate_load_certificates(), which has some very similar
 *      functionality and more in-depth comments.
 */
function uc_gift_certificate_total($uid) {
  if (variable_get('uc_gift_certificate_anonymous_recipients', '') == '1') {
    // Return the sum of only those gift certificate values which are issued to
    // the uid but not also purchased by the same uid.
    return (float) db_result(db_query("SELECT SUM(remaining_value) FROM {uc_gift_certificates} WHERE user_id = %d AND purchaser_id != %d", $uid, $uid));
  }
  else {
    // Never return gift certificates for anonymous users, because even if it's
    // in the database, something went wrong.
    if (!$uid) {
      return 0;
    }
    return (float) db_result(db_query("SELECT SUM(remaining_value) FROM {uc_gift_certificates} WHERE user_id = %d", $uid));
  }

}

/**
 * Settings for gift certificate text field options.
 */
function uc_gift_certificate_get_setting_defaults($setting) {
  switch ($setting) {
    case 'uc_gift_certificate_email_new_user_subject':
      return 'You have received a gift certificate';
    case 'uc_gift_certificate_email_subject':
      return 'You have been sent a gift certificate';
    case 'uc_gift_certificate_pane_msg':
      return '<p><strong>You have !tot worth of gift certificates. This amount will be automatically applied to your order total. PLEASE NOTE: If the value of your gift certificates, !tot, covers your order total, please select the USE MY GIFT CERTIFICATE payment option below. This avoids the need to enter credit card information </strong></p>';
    case 'uc_gift_certificate_order_status_issue':
    case 'uc_gift_certificate_order_status_deduct':
      return array (
        'payment_received' => 'payment_received',
        'pending' => 0,
        'processing' => 0,
        'paypal_pending' => 0,
        'completed' => 0,
        'canceled' => 0,
        'in_checkout' => 0,
      );
  }
}

/**
 * Finds an attribute based on the label and nid.
 */
function _uc_gc_find_attrib_by_label($label, $nid) {
  $result = db_query('SELECT ua.* FROM {uc_product_attributes} upa
                      LEFT JOIN {uc_attributes} ua USING(aid)
                      WHERE nid = %d AND (upa.label = "%s" OR ua.label = "%s" OR ua.name = "%s")',
    $nid, $label, $label, $label);
  return db_fetch_object($result);
}


/**
 * Get the certificates used in a specific order.
 *
 * Called by order-loading and checkout pane hooks.
 *  @param $order_id
 *   Anrder ID.
 *
 *  @return array
 *    Information about a gift certificate.
 */

function get_uc_gift_certificates($order) {

  // Now get certificates that are attached via the database.
  // @todo: Make sure we account for any certificates added at checkout.
  $certificates = db_query("
    SELECT ucgc.certificate_id, ucgc.cert_code, ucgc.original_value, ucgc.remaining_value, ucgco.order_id
    FROM {uc_gift_certificates} ucgc
    LEFT JOIN {uc_gift_certificate_orders} ucgco
    ON ucgc.certificate_id = ucgco.cid
    WHERE ucgco.order_id = %d
    AND ucgc.remaining_value > 0", $order->order_id);

  $certs = array();

  while ($certificate = db_fetch_object($certificates)) {

    // @todo: Note: we are ignoring remaining_value/applied_amount for now. Only relevant when attaching line_items.
    if ($order->order_id > 0)
      $applied_amount = ($order->order_total >= $certificate->remaining_value) ? $certificate->remaining_value : $order->order_total;

    $certs[$certificate->certificate_id] = array(
      'certificate_id' => $certificate->certificate_id,
      'cert_code' => $certificate->cert_code,
      'remaining_value' => $certificate->remaining_value,
      'original_value' => $certificate->original_value,
      'applied_amount' => abs($applied_amount),
    );
  }

  return $certs;

  //return $updated_order->uc_gift_certificate_used;
}


/**
 * Removes any gift certificate line items, while leaving other line items alone.
 *
 * @param $order
 *  A fully-loaded order object (reference)
 *
 * @return $order
 *  Modified order.
 */
function uc_gift_certificate_fix_line_items(&$order) {

  // Get line items from the current order.
  if (is_array($order->line_items)) {
    $existing_line_items = $order->line_items;
  }
  else {
    $existing_line_items = uc_order_load_line_items($order->order_id, TRUE);
  }
  unset ($order->line_items);

  // Use new_order_line_items to populate $arg1->line_items by:
  // Storing all non-discounts line items
  // Storing new discount line items
  $new_order_line_items = array();

  // Delete existing gift certificate line items
  foreach ($existing_line_items as $line_item) {
    if ($line_item["type"] == 'gift_certificate') {
      uc_order_delete_line_item($line_item["line_item_id"]);
    }
    // Otherwise store non-certificate line item
    else {
      $new_order_line_items[] = $line_item;
    }
  }

  $order->line_items = $new_order_line_items;
}

/**
 * Attach a gift certificate to an order.
 *
 *  @param object $order An order object
 *
 *  @param object $certificate
 *   A validated certificate object
 *
 *   If a new certificate has been validated by a user at checkout,
 *   we will calculate our deductions against it instead of the user's
 *   existing certificates.
 *
 *  @return Updated order object
 *
 */
function uc_gift_certificate_attach($order, $certificate) {
  // Make sure we are only applying the correct amount, based on order total
  // and how much a user has in their account.

  // @todo: Make sure we are only applying a certificate if there's 1) credit available and 2) order balance
  db_query("DELETE FROM {uc_gift_certificate_orders} WHERE cid = %d AND order_id = %d",
    $certificate->certificate_id, $order->order_id);

  $insert = new stdClass();
  $insert->cid = $certificate->certificate_id;
  $insert->order_id = $order->order_id;
  $insert->applied_amount = $certificate->remaining_value;
  drupal_write_record('uc_gift_certificate_orders', $insert);

  // Always return a uc_gift_certificate_used array if certificates are associated with this order.
  $certificates = db_query("SELECT * FROM {uc_gift_certificates} gc
    LEFT JOIN uc_gift_certificate_orders gco
    ON gc.certificate_id = gco.cid
    WHERE gco.order_id = %d", $order->order_id);

  unset($order->uc_gift_certificate_used);
  $order->uc_gift_certificate_used = array();

  db_query("UPDATE {uc_gift_certificates} SET user_id = %d, order_id = %d WHERE certificate_id = %d",
  $order->uid, $order->order_id, $certificate->certificate_id);
  while ($cert = db_fetch_array($certificates)) {
    $order->uc_gift_certificate_used[$cert->certificate_id] = $cert;
  }

  return $order;
}

/**
 *
 * Calculate how much we should deduct from an order's certificates
 *
 * @param $order
 *  A fully-loaed order object reference

 * @return Deduction in a negative amount.
 */
function uc_gift_certificate_calculate_deduction($order, $line_items = FALSE) { // Get order line items.

  if (!empty($order->uc_gift_certificate_used) && $order->order_total > 0) {
    $total_deducted = 0;
    $total_certificates = uc_gift_certificate_total($order->uid);

    $order->uc_gift_certificate_calculate = TRUE;
    $order_total = uc_order_get_total($order, TRUE); // Order total may not be correct, so we need to recalculate it.
    unset($order->uc_gift_certificate_calculate);

    $max_amount = ($total_certificates >= $order_total) ? $order_total : $total_certificates;

    // Loop through each certificate in the array and deduct the current applied amount.
    // @todo: Do some quick logic and math to make sure $applied_amount is never greater than $remaining_value or $order_total

    // If we can actually deduct something, let's do so.
    if ($max_amount > 0) {
      $certificate_data = array(); // Store the used certificate codes.
      // Keep deducting credit until we've reached our maximum
      while ($total_deducted < $max_amount) {
        // Loop through our certificates until we can't deduct anymore...
        foreach($order->uc_gift_certificate_used as $certificate) {
          // How much do we still need to deduct?
          $available_to_deduct = $max_amount - $total_deducted;

          // If the certificate can cover the amount remaining, do so.
          if ($available_to_deduct <= $certificate['remaining_value']) {
            $deducted_from_cert = $available_to_deduct;
          } else {
            // Otherwise, just deduct the remainder of the certificate.
            $deducted_from_cert = $certificate['remaining_value'];
          }

          // Increment our deduction tracking variable with the amount deducted.
          $total_deducted += $deducted_from_cert;
          $certificate_data[$certificate['cert_code']] = array(
            'cert_code' => $certificate['cert_code'],
            'certificate_id' => $certificate['certificate_id'],
            'applied_amount' => $deducted_from_cert,
          );
        }
      }
      // If we actually were able to deduct from the certificate, add the deduction line item.
      if ($total_deducted > 0 && $line_items == TRUE) {
        // Attach the certificate to the order as a line item.
        uc_order_line_item_add($order->order_id, 'gift_certificate', t('Gift Certificates'), -abs($deducted_from_cert), 10, $certificate_data);
      }
    }
    return -abs($total_deducted);
  }
}




// Calculate the maximum amount we can deduct from a user's certificate(s).
function uc_gift_certificate_calculate_max($uid, $order, $certificate = NULL) {
  if (!$uid || !$order) return FALSE;


}

/**
 *
 * Void certificates if an order is being canceled or refunded.
 *
 * @param $order
 *  The order object being updated
 */
function uc_gift_certificate_void_certificates($order) {

  // Was this order purchased (or discounted) with certificates?
  $certificate_amount = abs(db_result(db_query("SELECT SUM(amount) FROM {uc_order_line_items}
    WHERE 'type' = 'gift_certificate' AND order_id = %d", $order->order_id)));

  // If so, refund them to the user.
  if ($certificate_amount) {
    foreach($order->line_items as $line_item) {
      if ($line_item['type'] == 'gift_certificate' && $line_item['data']['certificate_id']) {

        // Load our certificate as it stands from the database.
        $certificate = uc_gift_certificate_load($line_item['data']['certificate_id']);

        db_query("UPDATE {uc_gift_certificates} SET remaining_value = %f WHERE certificate_id = %d AND user_id = %d LIMIT 1",
          $certificate->remaining_value -= $line_item['amount'], $line_item['certificate_id'], $order->uid);

        uc_order_comment_save($order->order_id, 0, t('Refunded !value to gift certificate !cid. New value !newvalue'),
          array('!value' => uc_currency_format(abs($line_item['amount'])),
            'cid' => $line_item['cert_code'],
            '!newvalue' => $certificate->remaining_value));
      }
    }
  }

  $email_attrib = uc_attribute_load(variable_get('uc_gift_certificate_email_aid', ''));

  // If this order contains (was used to PURCHASE) certificates, then we need to void them.
  foreach ($order->products as $product) {
    if (!empty($product->data['attributes'])) {
      foreach ($product->data['attributes'] as $label => $vals) {
        $attrib = _uc_gc_find_attrib_by_label($label, $product->nid);
        if ($attrib->aid == $email_attrib->aid) {
          db_query("DELETE FROM {uc_gift_certificates} WHERE order_id = %d AND order_product_id = %d",
            $product->order_id, $product->order_product_id);

          uc_order_comment_save($order->order_id, 0, t('Voided gift certificates worth !value.',
            array('!value' => uc_currency_format($product->qty * $product->price))));
          break;
        }
      }
    }
  }
}
